<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.10">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="norm" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="InterleavedStaircase" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="Instructions">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Please evaluate the quality differences between the two scenes.&amp;#10;&amp;#10;Press  ‘left’  if you think the stimulus on the left is of higher quality&amp;#10;&amp;#10;Press  ‘right’ if you think the stimulus on the right is of higer quality&amp;#10;&amp;#10;Press any key to start" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="set_condition">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="imageSet = imageSetLvl;&amp;#10;imageSetStr = imageSet.toString();&amp;#10;setName = imageSetName;&amp;#10;nRefImage = refSetNumber; &amp;#10;&amp;#10;initStep = (nRefImage * 2);&amp;#10;&amp;#10;noOfMiniScenes  = 3;&amp;#10;&amp;#10;reversals = 0;&amp;#10;trialCounter = 1;&amp;#10;&amp;#10;reversalsSharp = 0;&amp;#10;reversalsFlat =  0;&amp;#10;&amp;#10;&amp;#10;&amp;#10;levList = new Array(2);&amp;#10;respList = new Array(2);&amp;#10;kestList = new Array(2);&amp;#10;reverseList = new Array(2);&amp;#10;localTrialNo = new Array(2);&amp;#10;&amp;#10;&amp;#10;globalTrialNo = 60;&amp;#10;maxNoFlat = globalTrialNo/(noOfMiniScenes * 2);&amp;#10;&amp;#10;&amp;#10;for(var i = 0; i &lt; levList.length; i++)&amp;#10;{&amp;#10;    levList[i]= new Array(noOfMiniScenes + 2);&amp;#10;    respList[i] = new Array(noOfMiniScenes + 2);&amp;#10;    kestList[i] = new Array(noOfMiniScenes + 2);&amp;#10;    reverseList[i] = new Array(noOfMiniScenes + 2);&amp;#10;    localTrialNo[i] = new Array(noOfMiniScenes + 2)&amp;#10;    for(var j = 1; j &lt; levList[i].length; i++)&amp;#10;    {&amp;#10;        levList[i][j]= new Array(100).fill(0);&amp;#10;        respList[i][j] = new Array(100).fill(0);&amp;#10;        kestList[i][j] = new Array(100).fill(0);&amp;#10;        reverseList[i][j] = new Array(100).fill(0);&amp;#10;        localTrialNo[i][j] = 1;&amp;#10;    }&amp;#10;    &amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="imageSet = imageSetLvl&amp;#10;imageSetStr = str(imageSet)&amp;#10;setName = imageSetName&amp;#10;nRefImage = refSetNumber&amp;#10;&amp;#10;initStep = (nRefImage * 2)&amp;#10;&amp;#10;noOfMiniScenes  = 3&amp;#10;&amp;#10;reversals = 0&amp;#10;trialCounter = 1&amp;#10;&amp;#10;reversalsSharp = 0&amp;#10;reversalsFlat =  0&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;levList = [[[0] * 100] * (noOfMiniScenes+2)] * 2&amp;#10;respList = [[[0] * 100] * (noOfMiniScenes+2)] * 2&amp;#10;kestList = [[[0] * 100] * (noOfMiniScenes+2)] * 2&amp;#10;reverseList = [[[0] * 100] * (noOfMiniScenes+2)] * 2&amp;#10;localTrialNo = [[1] * (noOfMiniScenes + 2)] * 2&amp;#10;&amp;#10;&amp;#10;globalTrialNo = 18&amp;#10;maxNoFlat = globalTrialNo/(noOfMiniScenes * 2)&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="kesten_stair">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="leftImage = new Image();&amp;#10;rightImage = new Image();&amp;#10;&amp;#10;staircase = 0;&amp;#10;&amp;#10;currentScene = Math.floor(Math.random() * noOfMiniScenes) + 1;&amp;#10;currentStaircase = Math.random();&amp;#10;&amp;#10;&amp;#10;&amp;#10;if(trialCounter &lt;= globalTrialNo/2)&amp;#10;{&amp;#10;//if ((Math.random() &gt; 0.5)) {&amp;#10;    phi = 0.25;&amp;#10;    initN = (nRefImage * 2);&amp;#10;    staircase = 0;&amp;#10;    if(localTrialNo[staircase][currentScene] &gt; maxNoFlat){&amp;#10;        for(var i = 1; i &lt;= noOfMiniScenes; i++){&amp;#10;            if(localTrialNo[staircase][i] &lt;= maxNoFlat){&amp;#10;                currentScene = i;}&amp;#10;               }&amp;#10;   //           }&amp;#10;                &amp;#10;}&amp;#10;else {&amp;#10;//if  ((Math.random() &lt;= 0.5)){&amp;#10;    phi = 0.75;&amp;#10;    initN = (nRefImage / 4);&amp;#10;    staircase = 1;&amp;#10;    if(localTrialNo[staircase][currentScene] &gt; maxNoFlat){&amp;#10;        for(var i = 1; i &lt;= noOfMiniScenes; i++){&amp;#10;            if(localTrialNo[staircase][i] &lt;= maxNoFlat){&amp;#10;                currentScene = i;}&amp;#10;                }&amp;#10; //               }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;trial = localTrialNo[staircase][currentScene];   &amp;#10;&amp;#10;if ((Math.random() &gt; 0.5)) {&amp;#10;    refSide = 1;&amp;#10;} else {&amp;#10;    refSide = (- 1);&amp;#10;}&amp;#10;compSide = (refSide * (- 1));&amp;#10;&amp;#10;if ((trial === 1)) {&amp;#10;    levList[staircase][currentScene][trial] = initN;&amp;#10;} else&amp;#10;{&amp;#10;    if ((trial === 2)) &amp;#10;    {&amp;#10;        levList[staircase][currentScene][trial] = (initN - ((initStep / 2) * (kestList[staircase][currentScene][(trial - 1)] - phi)));&amp;#10;    } &amp;#10;    else&amp;#10;    {&amp;#10;        levList[staircase][currentScene][trial] = (levList[staircase][currentScene][(trial - 1)] - ((initStep / (reversals + 2)) * (kestList[staircase][currentScene][(trial - 1)] - phi)));&amp;#10;    }&amp;#10;}&amp;#10;if ((levList[staircase][currentScene][trial] &gt; initN)) {&amp;#10;    levList[staircase][currentScene][trial] = initN;&amp;#10;}&amp;#10;&amp;#10;if ((levList[staircase][currentScene][trial] &lt; 1)) {&amp;#10;    levList[staircase][currentScene][trial] = 1;&amp;#10;}&amp;#10;console.log(trial);&amp;#10;console.log(levList[staircase][currentScene][trial]);&amp;#10;&amp;#10;nCompQuality = Number.parseInt(round(levList[staircase][currentScene][trial]));&amp;#10;comp_num = nCompQuality;&amp;#10;&amp;#10;&amp;#10;if ((refSide === (- 1))) {&amp;#10;    leftImage.src = `stimuli/${imageSetStr}/${currentScene}/${nRefImage}_${setName}.png`;&amp;#10;    rightImage.src = `stimuli/${imageSetStr}/${currentScene}/${comp_num}_${setName}.png`;&amp;#10;} else {&amp;#10;    leftImage.src = `stimuli/${imageSetStr}/${currentScene}/${comp_num}_${setName}.png`;&amp;#10;    rightImage.src = `stimuli/${imageSetStr}/${currentScene}/${nRefImage}_${setName}.png`;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;images1  = [f'stimuli/{imageSetStr}/1/{i}_{imageSetName}.png' for i in range(22)]&amp;#10;images2 = [f'stimuli/{imageSetStr}/2/{i}_{imageSetName}.png' for i in range(22)]&amp;#10;images3 = [f'stimuli/{imageSetStr}/3/{i}_{imageSetName}.png' for i in range(22)]&amp;#10;&amp;#10;currentScene = int(random() * noOfMiniScenes) + 1&amp;#10;&amp;#10;&amp;#10;if trialCounter &lt;= globalTrialNo/(2*2):&amp;#10;    phi = 0.25&amp;#10;    initN = nRefImage * 3&amp;#10;    staircase = 0&amp;#10;    if localTrialNo[staircase][currentScene] &gt; maxNoFlat:&amp;#10;        i = 1 &amp;#10;        while (i &lt;= noOfMiniScenes): &amp;#10;            if localTrialNo[staircase][currentScene] &lt;= maxNoFlat:&amp;#10;                currentScene = i&amp;#10;            i = i + 1&amp;#10;else:&amp;#10;    phi = 0.75&amp;#10;    initN = 0&amp;#10;    staircase = 1&amp;#10;    if localTrialNo[staircase][currentScene] &gt; maxNoFlat:&amp;#10;        i = 1 &amp;#10;        while (i &lt;= noOfMiniScenes):  &amp;#10;            if localTrialNo[staircase][currentScene] &lt;= maxNoFlat:              &amp;#10;                currentScene = i&amp;#10;            i = i + 1&amp;#10;&amp;#10;if currentScene == 1:&amp;#10;    images = images1&amp;#10;elif currentScene == 2:&amp;#10;    images = images2&amp;#10;elif currentScene == 3:&amp;#10;    images = images3&amp;#10;print(currentScene)&amp;#10;trial = localTrialNo[staircase][currentScene]&amp;#10;&amp;#10;if random() &gt; 0.5:&amp;#10;    refSide = 1&amp;#10;else:&amp;#10;    refSide = -1&amp;#10;    &amp;#10;compSide = refSide * -1 &amp;#10;&amp;#10;if trial == 1:&amp;#10;   levList[staircase][currentScene][trial] = initN&amp;#10;elif trial == 2:&amp;#10;    levList[staircase][currentScene][trial] = initN-(initStep/2)*(kestList[staircase][currentScene][trial-1]-phi)&amp;#10;else:&amp;#10;    levList[staircase][currentScene][trial] = levList[staircase][currentScene][trial-1]-(initStep/(reversals+2))*(kestList[staircase][currentScene][trial-1]-phi)&amp;#10;&amp;#10;# bound range&amp;#10;if levList[staircase][currentScene][trial] &gt; initN:&amp;#10;    levList[staircase][currentScene][trial] = initN&amp;#10;if levList[staircase][currentScene][trial] &lt; 1:&amp;#10;    levList[staircase][currentScene][trial] = 1&amp;#10;&amp;#10;print(trial)&amp;#10;print(levList[staircase][currentScene][trial])&amp;#10;&amp;#10;nCompQuality = int(round(levList[staircase][currentScene][trial]))&amp;#10;&amp;#10;comp_num = nCompQuality &amp;#10;&amp;#10;if refSide == -1:&amp;#10;    leftImage = images[nRefImage]&amp;#10;    rightImage = images[comp_num]&amp;#10;else:&amp;#10;    leftImage = images[comp_num]&amp;#10;    rightImage = images[nRefImage]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;Trial No.&quot;, trial);&amp;#10;psychoJS.experiment.addData(&quot;Comp Side&quot;, (refSide * (- 1)));&amp;#10;psychoJS.experiment.addData(&quot;Ref Num&quot;, nRefImage);&amp;#10;psychoJS.experiment.addData(&quot;Level List&quot;, levList[staircase][currentScene][trial]);&amp;#10;psychoJS.experiment.addData(&quot;Bounce Num&quot;, comp_num);&amp;#10;psychoJS.experiment.addData(&quot;Staircase&quot;, staircase);&amp;#10;psychoJS.experiment.addData(&quot;Scene No&quot;, currentScene);&amp;#10;&amp;#10;kestResp = 0;&amp;#10;if(staircase == 0)&amp;#10;{&amp;#10;    if (((compSide &lt; 0) &amp;&amp; (resp.keys === &quot;left&quot;))) {&amp;#10;    kestResp = 1;&amp;#10;}&amp;#10;else {&amp;#10;        if (((compSide &gt; 0) &amp;&amp; (resp.keys === &quot;right&quot;))) &amp;#10;        {&amp;#10;            kestResp = 1;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;else&amp;#10;{&amp;#10;    if (((compSide &gt; 0) &amp;&amp; (resp.keys === &quot;left&quot;))) {&amp;#10;    kestResp = 1;&amp;#10;} else {&amp;#10;    if (((compSide &lt; 0) &amp;&amp; (resp.keys === &quot;right&quot;))) {&amp;#10;        kestResp = 1;&amp;#10;    }&amp;#10;}&amp;#10;}&amp;#10;&amp;#10;kestList[staircase][currentScene][trial] = kestResp;&amp;#10;psychoJS.experiment.addData(&quot;comp&gt;ref?&quot;, kestResp);&amp;#10;if ((localTrialNo[staircase][currentScene] &gt; 1)) {&amp;#10;    if ((kestList[staircase][currentScene][trial] !== kestList[staircase][currentScene][(trial - 1)])) {&amp;#10;        reversals += 1;&amp;#10;        reverseList[staircase][currentScene][reversals] = levList[staircase][currentScene][(trial - 1)];&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;localTrialNo[staircase][currentScene] = (localTrialNo[staircase][currentScene] + 1);&amp;#10;trialCounter = (trialCounter + 1);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# store level and response&amp;#10;#respList.append(response)&amp;#10;thisExp.addData('Trial No.', trial)&amp;#10;thisExp.addData('Comp Side', refSide * -1)&amp;#10;thisExp.addData('Ref Num', nRefImage)&amp;#10;thisExp.addData('Level List', levList[staircase][currentScene][trial])&amp;#10;thisExp.addData('Bounce Num', comp_num)&amp;#10;thisExp.addData('Staircase', staircase)&amp;#10;thisExp.addData('Scene No', currentScene)&amp;#10;&amp;#10;kestResp = 0&amp;#10;if staircase == 0:&amp;#10;    if compSide &lt; 0 and resp.keys == 'left':&amp;#10;        kestResp = 1 # comp more realistic &amp;#10;    elif compSide &gt; 0 and resp.keys == 'right':&amp;#10;        kestResp = 1 # comp more realisitic&amp;#10;else:&amp;#10;    if compSide &gt; 0 and resp.keys == 'left':&amp;#10;        kestResp = 1 # comp more realistic &amp;#10;    elif compSide &lt; 0 and resp.keys == 'right':&amp;#10;        kestResp = 1 # comp more realisitic&amp;#10;    &amp;#10;&amp;#10;kestList[staircase][currentScene][trial] = kestResp&amp;#10;thisExp.addData('comp&gt;ref?', kestResp)&amp;#10;&amp;#10;# count reversals&amp;#10;if localTrialNo[staircase][currentScene] &gt; 1:&amp;#10;    if kestList[staircase][currentScene][trial] != kestList[staircase][currentScene][trial-1]:&amp;#10;        reversals += 1&amp;#10;        reverseList[staircase][currentScene][reversals] = levList[staircase][currentScene][trial-1]&amp;#10;&amp;#10;# increment trials&amp;#10;localTrialNo[staircase][currentScene] = localTrialNo[staircase][currentScene]+1&amp;#10;trialCounter = trialCounter + 1 &amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="kesten_stair" valType="code"/>
      </CodeComponent>
      <ImageComponent name="leftImagePortrait">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$leftImage" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="leftImagePortrait" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <StaticComponent name="ISI">
        <Param name="code" updates="None" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="ISI" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
      </StaticComponent>
      <ImageComponent name="rightImagePortrait">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$rightImage" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="rightImagePortrait" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.5, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="5.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Please record your answer. " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="resp">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="5.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="end"/>
  </Routines>
  <Flow>
    <Routine name="Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('imageSetLvl', 1), ('imageSetName', 'barber'), ('refSetNumber', 7)]), OrderedDict([('imageSetLvl', 2), ('imageSetName', 'car'), ('refSetNumber', 4)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="imageConds2.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="set_condition"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="18" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
